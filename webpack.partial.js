const CompressionPlugin = require('compression-webpack-plugin');
const CircularDependencyPlugin = require('circular-dependency-plugin');

module.exports = (config) => {
	console.log('\n*******');
	console.log(config.mode);
	console.log('*******');
	if (config.mode !== 'development') {
		config.plugins = [
			...config.plugins,
			new CompressionPlugin({
				test: /\.(js|css|html|svg|txt|eot|otf|ttf|gif)$/,
			}),
		];
	} else {
		config.plugins = [
			...config.plugins,
			new CircularDependencyPlugin({
				// exclude detection of files based on a RegExp
				exclude: /node_modules/,
				// add errors to webpack instead of warnings
				failOnError: true,
				// allow import cycles that include an asyncronous import,
				// e.g. via import(/* webpackMode: "weak" */ './file.js')
				allowAsyncCycles: false,
				// set the current working directory for displaying module paths
				cwd: process.cwd(),
				// `onDetected` is called for each module that is cyclical
				onDetected({ module: webpackModuleRecord, paths, compilation }) {
					// `paths` will be an Array of the relative module paths that make up the cycle
					// `module` will be the module record generated by webpack that caused the cycle
					compilation.errors.push(new Error(paths.join(' -> ')));
				},
			}),
		];
	}
	return config;
};
